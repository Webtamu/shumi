name: PyQt6 CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        python-version: ['3.9.13']
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    env:
      DISPLAY: ":99.0"
      QT_SELECT: "qt6"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Linux: Install necessary Qt/X dependencies
      - name: Setup xvfb and dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
                                  libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 \
                                  libxcb-xinput0 libxcb-xfixes0 libxcb-shape0 libglib2.0-0 libgl1-mesa-dev \
                                  '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev \
                                  libxkbcommon-dev libxkbcommon-x11-dev
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &

      # Windows: Fully remove PyQt6 before installing
      - name: Fully Remove PyQt6 and Reinstall (Windows)
        if: runner.os == 'Windows'
        run: |
          pip uninstall -y PyQt6 PyQt6-Qt6 PyQt6-sip || true
          python -m pip install --upgrade pip
          pip install --no-cache-dir PyQt6==6.4.2

      # Windows: Ensure Qt DLLs are in PATH
      - name: Fix PyQt6 DLL Path (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6\Qt6\bin" >> $env:GITHUB_PATH
          echo "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6" >> $env:GITHUB_PATH
          echo "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Scripts" >> $env:GITHUB_PATH
          # Ensure Qt DLLs are in the system PATH
          echo "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6\Qt6\bin" >> $env:PATH
          echo "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6" >> $env:PATH
          echo "C:\Qt\bin" >> $env:PATH

      # Windows: Copy Qt DLLs to C:\Qt\bin
      - name: Copy Qt DLLs to C:\Qt\bin (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p C:\Qt\bin
          cp C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6\Qt6\bin\* C:\Qt\bin
          echo "C:\Qt\bin" >> $env:GITHUB_PATH

      # Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install pytest pytest-qt
          pip install -r requirements.txt

      # List installed packages (for debugging)
      - name: List installed packages
        run: pip freeze

      # Debug PyQt6 DLLs to verify they are accessible (Windows)
      - name: Debug PyQt6 DLLs (Windows)
        if: runner.os == 'Windows'
        run: |
          echo $env:PATH
          dir "C:\hostedtoolcache\windows\Python\${{ matrix.python-version }}\x64\Lib\site-packages\PyQt6\Qt6\bin"

      # Verify PyQt6 installation before running tests
      - name: Verify PyQt6 Installation
        run: python -c "from PyQt6.QtCore import QCoreApplication; print('PyQt6 is working!')"

      # Run tests using pytest instead of running the full app
      - name: Test with pytest
        run: |
          pytest -x tests
